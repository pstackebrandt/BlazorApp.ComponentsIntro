@* Reusable component for displaying implementation and design comments *@

<!-- Toggle button for implementation comments -->
<button class="btn btn-secondary @ButtonSize @ButtonPadding @CssClass" 
        style="height: 38px; line-height: 1;"
        @onclick="ToggleComments"
        title="@TooltipText"
        aria-label="@TooltipText">
    <span class="@IconSize">@ButtonIcon</span>@if (ShowButtonText)
    {
        <span class="ms-1">@(showComments ? "Hide" : "Show") @ButtonText</span>
    }
</button>

@if (showComments)
{
    <!-- Floating modal overlay -->
    <div class="position-fixed top-0 start-0 w-100 h-100" 
         style="z-index: 1050; background-color: rgba(0,0,0,0.3);"
         @onclick="ToggleComments">
        
        <!-- Draggable modal dialog -->
        <div id="@modalId" 
             class="position-absolute bg-white border shadow-lg rounded draggable-modal" 
             style="top: 20%; left: 20%; width: 60%; max-width: 800px; min-width: 400px; z-index: 1051;"
             @onclick:stopPropagation="true">
            
            <!-- Modal header with drag handle -->
            <div class="d-flex justify-content-between align-items-center p-3 border-bottom bg-light rounded-top drag-handle"
                 style="cursor: move; user-select: none;">
                <h5 class="mb-0">
                    <span class="me-2">@ButtonIcon</span>
                    <strong>@LabelText</strong>
                </h5>
                <button type="button" 
                        class="btn btn-sm btn-outline-secondary"
                        style="pointer-events: auto;"
                        @onclick="ToggleComments"
                        title="Close">
                    ‚úï
                </button>
            </div>
            
            <!-- Modal content -->
            <div class="p-3">
                <textarea id="@textareaId" 
                          class="form-control" 
                          rows="@CalculatedRows" 
                          style="resize: both; min-height: 200px;"
                          @bind="currentComments"
                          placeholder="@Placeholder">
                </textarea>
            </div>
            
            <!-- Modal footer -->
            <div class="p-2 border-top bg-light rounded-bottom text-muted small">
                <span class="me-3">üí° Tip: Drag the header to move this window</span>
                <span>üìè Resize: Use the corner handle</span>
            </div>
        </div>
    </div>
}

<style>
    .draggable-modal {
        transition: none !important;
    }
    
    .drag-handle:hover {
        background-color: #e9ecef !important;
    }
    
    .drag-handle:active {
        cursor: grabbing !important;
        background-color: #dee2e6 !important;
    }
</style>

<script>
    window.makeDraggable = function(modalId) {
        const modal = document.getElementById(modalId);
        const dragHandle = modal?.querySelector('.drag-handle');
        
        if (!modal || !dragHandle) {
            console.log('Modal or drag handle not found:', modalId);
            return;
        }
        
        let isDragging = false;
        let currentX = 0;
        let currentY = 0;
        let initialX = 0;
        let initialY = 0;
        
        // Remove any existing event listeners
        dragHandle.onmousedown = null;
        
        dragHandle.onmousedown = function(e) {
            // Don't drag when clicking the close button or other buttons
            if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                return;
            }
            
            e.preventDefault();
            isDragging = true;
            
            const rect = modal.getBoundingClientRect();
            initialX = e.clientX - rect.left;
            initialY = e.clientY - rect.top;
            
            document.body.style.userSelect = 'none';
            dragHandle.style.cursor = 'grabbing';
        };
        
        document.onmousemove = function(e) {
            if (!isDragging) return;
            
            e.preventDefault();
            
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
            
            // Keep modal within viewport
            const modalRect = modal.getBoundingClientRect();
            const maxX = window.innerWidth - modalRect.width;
            const maxY = window.innerHeight - modalRect.height;
            
            currentX = Math.max(0, Math.min(currentX, maxX));
            currentY = Math.max(0, Math.min(currentY, maxY));
            
            modal.style.left = currentX + 'px';
            modal.style.top = currentY + 'px';
            modal.style.transform = 'none';
        };
        
        document.onmouseup = function() {
            if (!isDragging) return;
            
            isDragging = false;
            document.body.style.userSelect = '';
            dragHandle.style.cursor = 'move';
        };
        
        console.log('Drag functionality initialized for:', modalId);
    };
</script> 